<class>
<keyword> class </keyword>
<identifier> Ball</identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
Define x type:int kind:FIELD index:0
<identifier> x </identifier>
<symbol> , </symbol>
Define y type:int kind:FIELD index:1
<identifier> y </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
Define lengthx type:int kind:FIELD index:2
<identifier> lengthx </identifier>
<symbol> , </symbol>
Define lengthy type:int kind:FIELD index:3
<identifier> lengthy </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
Define d type:int kind:FIELD index:4
<identifier> d </identifier>
<symbol> , </symbol>
Define straightD type:int kind:FIELD index:5
<identifier> straightD </identifier>
<symbol> , </symbol>
Define diagonalD type:int kind:FIELD index:6
<identifier> diagonalD </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
Define invert type:boolean kind:FIELD index:7
<identifier> invert </identifier>
<symbol> , </symbol>
Define positivex type:boolean kind:FIELD index:8
<identifier> positivex </identifier>
<symbol> , </symbol>
Define positivey type:boolean kind:FIELD index:9
<identifier> positivey </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
Define leftWall type:int kind:FIELD index:10
<identifier> leftWall </identifier>
<symbol> , </symbol>
Define rightWall type:int kind:FIELD index:11
<identifier> rightWall </identifier>
<symbol> , </symbol>
Define topWall type:int kind:FIELD index:12
<identifier> topWall </identifier>
<symbol> , </symbol>
Define bottomWall type:int kind:FIELD index:13
<identifier> bottomWall </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
Define wall type:int kind:FIELD index:14
<identifier> wall </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Ball </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
Define Ax type:int kind:ARG index:0
<identifier> Ax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
Define Ay type:int kind:ARG index:1
<identifier> Ay </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
Define AleftWall type:int kind:ARG index:2
<identifier> AleftWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
Define ArightWall type:int kind:ARG index:3
<identifier> ArightWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
Define AtopWall type:int kind:ARG index:4
<identifier> AtopWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
Define AbottomWall type:int kind:ARG index:5
<identifier> AbottomWall </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> Ax </identifier>
Use Ax type:int kind:ARG index:0
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> Ay </identifier>
Use Ay type:int kind:ARG index:1
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> leftWall </identifier>
Use leftWall type:int kind:FIELD index:10
<symbol> = </symbol>
<expression>
<term>
<identifier> AleftWall </identifier>
Use AleftWall type:int kind:ARG index:2
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> rightWall </identifier>
Use rightWall type:int kind:FIELD index:11
<symbol> = </symbol>
<expression>
<term>
<identifier> ArightWall </identifier>
Use ArightWall type:int kind:ARG index:3
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> topWall </identifier>
Use topWall type:int kind:FIELD index:12
<symbol> = </symbol>
<expression>
<term>
<identifier> AtopWall </identifier>
Use AtopWall type:int kind:ARG index:4
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bottomWall </identifier>
Use bottomWall type:int kind:FIELD index:13
<symbol> = </symbol>
<expression>
<term>
<identifier> AbottomWall </identifier>
Use AbottomWall type:int kind:ARG index:5
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
Define destx type:int kind:ARG index:1
<identifier> destx </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
Define desty type:int kind:ARG index:2
<identifier> desty </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
Define dx type:int kind:VAR index:0
<identifier> dx </identifier>
<symbol> , </symbol>
Define dy type:int kind:VAR index:1
<identifier> dy </identifier>
<symbol> , </symbol>
Define temp type:int kind:VAR index:2
<identifier> temp </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> lengthx </identifier>
Use lengthx type:int kind:FIELD index:2
<symbol> = </symbol>
<expression>
<term>
<identifier> destx </identifier>
Use destx type:int kind:ARG index:1
</term>
<symbol> - </symbol>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> lengthy </identifier>
Use lengthy type:int kind:FIELD index:3
<symbol> = </symbol>
<expression>
<term>
<identifier> desty </identifier>
Use desty type:int kind:ARG index:2
</term>
<symbol> - </symbol>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
Use dx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> lengthx </identifier>
Use lengthx type:int kind:FIELD index:2
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> lengthy </identifier>
Use lengthy type:int kind:FIELD index:3
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> invert </identifier>
Use invert type:boolean kind:FIELD index:7
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
Use dx type:int kind:VAR index:0
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
Use invert type:boolean kind:FIELD index:7
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> temp </identifier>
Use temp type:int kind:VAR index:2
<symbol> = </symbol>
<expression>
<term>
<identifier> dx </identifier>
Use dx type:int kind:VAR index:0
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
Use dx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> temp </identifier>
Use temp type:int kind:VAR index:2
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivex </identifier>
Use positivex type:boolean kind:FIELD index:8
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> &lt; </symbol>
<term>
<identifier> desty </identifier>
Use desty type:int kind:ARG index:2
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivey </identifier>
Use positivey type:boolean kind:FIELD index:9
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> &lt; </symbol>
<term>
<identifier> destx </identifier>
Use destx type:int kind:ARG index:1
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> positivex </identifier>
Use positivex type:boolean kind:FIELD index:8
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> &lt; </symbol>
<term>
<identifier> destx </identifier>
Use destx type:int kind:ARG index:1
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivey </identifier>
Use positivey type:boolean kind:FIELD index:9
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> &lt; </symbol>
<term>
<identifier> desty </identifier>
Use desty type:int kind:ARG index:2
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> d </identifier>
Use d type:int kind:FIELD index:4
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
Use dx type:int kind:VAR index:0
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> straightD </identifier>
Use straightD type:int kind:FIELD index:5
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diagonalD </identifier>
Use diagonalD type:int kind:FIELD index:6
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
Use dy type:int kind:VAR index:1
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
Use dx type:int kind:VAR index:0
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> move </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> d </identifier>
Use d type:int kind:FIELD index:4
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> d </identifier>
Use d type:int kind:FIELD index:4
<symbol> = </symbol>
<expression>
<term>
<identifier> d </identifier>
Use d type:int kind:FIELD index:4
</term>
<symbol> + </symbol>
<term>
<identifier> straightD </identifier>
Use straightD type:int kind:FIELD index:5
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> d </identifier>
Use d type:int kind:FIELD index:4
<symbol> = </symbol>
<expression>
<term>
<identifier> d </identifier>
Use d type:int kind:FIELD index:4
</term>
<symbol> + </symbol>
<term>
<identifier> diagonalD </identifier>
Use diagonalD type:int kind:FIELD index:6
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> positivey </identifier>
Use positivey type:boolean kind:FIELD index:9
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
Use invert type:boolean kind:FIELD index:7
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
Use invert type:boolean kind:FIELD index:7
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> positivex </identifier>
Use positivex type:boolean kind:FIELD index:8
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
Use invert type:boolean kind:FIELD index:7
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
Use invert type:boolean kind:FIELD index:7
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> &gt; </symbol>
<term>
<identifier> leftWall </identifier>
Use leftWall type:int kind:FIELD index:10
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> leftWall </identifier>
Use leftWall type:int kind:FIELD index:10
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> &lt; </symbol>
<term>
<identifier> rightWall </identifier>
Use rightWall type:int kind:FIELD index:11
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> rightWall </identifier>
Use rightWall type:int kind:FIELD index:11
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> &gt; </symbol>
<term>
<identifier> topWall </identifier>
Use topWall type:int kind:FIELD index:12
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> topWall </identifier>
Use topWall type:int kind:FIELD index:12
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> &lt; </symbol>
<term>
<identifier> bottomWall </identifier>
Use bottomWall type:int kind:FIELD index:13
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> bottomWall </identifier>
Use bottomWall type:int kind:FIELD index:13
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> bounce </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
Define bouncingDirection type:int kind:ARG index:1
<identifier> bouncingDirection </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
Define newx type:int kind:VAR index:0
<identifier> newx </identifier>
<symbol> , </symbol>
Define newy type:int kind:VAR index:1
<identifier> newy </identifier>
<symbol> , </symbol>
Define divLengthx type:int kind:VAR index:2
<identifier> divLengthx </identifier>
<symbol> , </symbol>
Define divLengthy type:int kind:VAR index:3
<identifier> divLengthy </identifier>
<symbol> , </symbol>
Define factor type:int kind:VAR index:4
<identifier> factor </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> divLengthx </identifier>
Use divLengthx type:int kind:VAR index:2
<symbol> = </symbol>
<expression>
<term>
<identifier> lengthx </identifier>
Use lengthx type:int kind:FIELD index:2
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> divLengthy </identifier>
Use divLengthy type:int kind:VAR index:3
<symbol> = </symbol>
<expression>
<term>
<identifier> lengthy </identifier>
Use lengthy type:int kind:FIELD index:3
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection </identifier>
Use bouncingDirection type:int kind:ARG index:1
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> lengthx </identifier>
Use lengthx type:int kind:FIELD index:2
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection </identifier>
Use bouncingDirection type:int kind:ARG index:1
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> lengthx </identifier>
Use lengthx type:int kind:FIELD index:2
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection </identifier>
Use bouncingDirection type:int kind:ARG index:1
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 20 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 506 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthy </identifier>
Use divLengthy type:int kind:VAR index:3
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthx </identifier>
Use divLengthx type:int kind:VAR index:2
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
</term>
<symbol> = </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthy </identifier>
Use divLengthy type:int kind:VAR index:3
</term>
<symbol> * </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthx </identifier>
Use divLengthx type:int kind:VAR index:2
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
Use y type:int kind:FIELD index:1
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
Use wall type:int kind:FIELD index:14
</term>
<symbol> = </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 250 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthx </identifier>
Use divLengthx type:int kind:VAR index:2
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthy </identifier>
Use divLengthy type:int kind:VAR index:3
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthx </identifier>
Use divLengthx type:int kind:VAR index:2
</term>
<symbol> * </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthy </identifier>
Use divLengthy type:int kind:VAR index:3
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
Use x type:int kind:FIELD index:0
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
Use factor type:int kind:VAR index:4
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> newx </identifier>
Use newx type:int kind:VAR index:0
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> newy </identifier>
Use newy type:int kind:VAR index:1
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
